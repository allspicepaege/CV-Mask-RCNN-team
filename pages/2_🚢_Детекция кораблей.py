#imports
import streamlit as st
import time
import torch
import requests
import cv2
import numpy as np

#from'sc
from io import BytesIO
from PIL import Image
from ultralytics import YOLO

st.set_page_config(
    page_title="–î–µ—Ç–µ–∫—Ü–∏—è –∫–æ—Ä–∞–±–ª–µ–π",
    page_icon="üö¢",
)

st.markdown(
    '<h1 style="text-align: center;">–ú–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –º–æ—Ä—Å–∫–∏–µ —Å—É–¥–∞ –Ω–∞ –∞—ç—Ä–æ—Å–Ω–∏–º–∫–∞—Ö</h1>',
    unsafe_allow_html=True
)
st.write('**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –≤ –º–æ–¥–µ–ª—å. –ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—Ä–∞–±–ª—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ.**')

# –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_files = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', type=['png', 'jpg', 'jpeg'], accept_multiple_files=True)
image_url = st.text_input('–í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
images = []

if uploaded_files:
    images = [Image.open(file) for file in uploaded_files]

elif image_url:
    try:
        response = requests.get(image_url)
        img = Image.open(BytesIO(response.content))
        images.append(img)
    except Exception as e:
        st.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ. –û—à–∏–±–∫–∞: {e}')

if not images:
    st.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!')
    st.stop()

######################
### MODEL
######################

@st.cache_resource()
def load_model():
    return YOLO('/home/marena/Elbrus_phase_2/CV-Mask-RCNN-team/models/model_2/best.pt')

model = load_model()

def predict_image(img):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –º–∞—Å–∫–∏."""
    img_cv2 = np.array(img)
    img_cv2 = cv2.cvtColor(img_cv2, cv2.COLOR_RGB2BGR)
    results = model(img_cv2)
    result_img = results[0].plot()
    result_pil = Image.fromarray(cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB))
    return result_pil

######################
### PREDICTION
######################

start_time = time.time()

for img in images:
    st.image(img, caption='–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', use_container_width=True)

    pred_img = predict_image(img)

    st.write('–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:')
    st.image(pred_img, caption='–†–µ–∑—É–ª—å—Ç–∞—Ç', use_container_width=True)

end_time = time.time()
elapsed_time = end_time - start_time

st.write('‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Å–µ–∫):')
st.markdown(f"""
<h3 style='text-align: center; font-size: 30px; font-weight: bold; padding: 5px; border-radius:5px;'>
{elapsed_time:.2f}
</h3>
""", unsafe_allow_html=True)